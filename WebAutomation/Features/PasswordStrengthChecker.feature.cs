// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WebAutomation.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PasswordStrengthChecker")]
    public partial class PasswordStrengthCheckerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PasswordStrengthChecker.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "PasswordStrengthChecker", "\tUser should be able to check the strength of his/her password using this applica" +
                    "tion", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User should be able to see the initial load UI/UX of the Password Strength Checke" +
            "r app")]
        public virtual void UserShouldBeAbleToSeeTheInitialLoadUIUXOfThePasswordStrengthCheckerApp()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User should be able to see the initial load UI/UX of the Password Strength Checke" +
                    "r app", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
testRunner.Given("that I am in Password Strength Checker app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Component",
                            "Detail"});
                table1.AddRow(new string[] {
                            "1",
                            "Label",
                            "Is your password tough enough?"});
                table1.AddRow(new string[] {
                            "2",
                            "TextField",
                            "enter a password"});
                table1.AddRow(new string[] {
                            "3",
                            "Strength level indicator",
                            "5"});
#line 7
testRunner.When("I view the initial load UI/UX", ((string)(null)), table1, "When ");
#line hidden
#line 13
testRunner.Then("I should be able to see all expected components", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User should be able to see the password strength upon input of a password")]
        [NUnit.Framework.TestCaseAttribute("abcd", "password\'s too short", "D.W. Morgan IT Policy recommends at least 12 characters.", "", "0", "#b23036", null)]
        [NUnit.Framework.TestCaseAttribute("abcdefghijklmnop", "less than a second to crack", "Sequences like abc or 6543 are easy to guess.", "Add another word or two. Uncommon words are better. Avoid sequences.", "0", "#b23036", null)]
        [NUnit.Framework.TestCaseAttribute("abcabcabcabcabcabc", "less than a second to crack", "Repeats like \"abcabcabc\" are only slightly harder to guess than \"abc\".", "Add another word or two. Uncommon words are better. Avoid repeated words and char" +
            "acters.", "0", "#b23036", null)]
        [NUnit.Framework.TestCaseAttribute("songoku12345", "1 minute to crack", "This is similar to a commonly used password.", "Add another word or two. Uncommon words are better.", "1", "#ba606f", null)]
        [NUnit.Framework.TestCaseAttribute("kamehamewave", "1 hour to crack", "", "Add another word or two. Uncommon words are better.", "2", "#f1a816", null)]
        [NUnit.Framework.TestCaseAttribute("superPogiLeslie", "11 days to crack", "", "", "3", "#e2c537", null)]
        [NUnit.Framework.TestCaseAttribute("gfgj458696i7ht$*&*@%(%", "centuries to crack", "", "", "4", "#2c7a26", null)]
        public virtual void UserShouldBeAbleToSeeThePasswordStrengthUponInputOfAPassword(string password, string estimatedGuessTime, string warning, string suggestions, string score, string indicatorColor, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("EstimatedGuessTime", estimatedGuessTime);
            argumentsOfScenario.Add("Warning", warning);
            argumentsOfScenario.Add("Suggestions", suggestions);
            argumentsOfScenario.Add("Score", score);
            argumentsOfScenario.Add("IndicatorColor", indicatorColor);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User should be able to see the password strength upon input of a password", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
testRunner.Given("that I am in Password Strength Checker app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
testRunner.When(string.Format("I input a password \"{0}\"", password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "EstimatedGuessTime",
                            "Warning",
                            "Suggestions",
                            "Score",
                            "IndicatorColor"});
                table2.AddRow(new string[] {
                            string.Format("{0}", estimatedGuessTime),
                            string.Format("{0}", warning),
                            string.Format("{0}", suggestions),
                            string.Format("{0}", score),
                            string.Format("{0}", indicatorColor)});
#line 20
testRunner.Then("I should be able to see the expected response", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
